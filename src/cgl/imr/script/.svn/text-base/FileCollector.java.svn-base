/*
 * Software License, Version 1.0
 *
 *  Copyright 2003 The Trustees of Indiana University.  All rights reserved.
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1) All redistributions of source code must retain the above copyright notice,
 *  the list of authors in the original source code, this list of conditions and
 *  the disclaimer listed in this license;
 * 2) All redistributions in binary form must reproduce the above copyright
 *  notice, this list of conditions and the disclaimer listed in this license in
 *  the documentation and/or other materials provided with the distribution;
 * 3) Any documentation included with all redistributions must include the
 *  following acknowledgement:
 *
 * "This product includes software developed by the Community Grids Lab. For
 *  further information contact the Community Grids Lab at
 *  http://communitygrids.iu.edu/."
 *
 *  Alternatively, this acknowledgement may appear in the software itself, and
 *  wherever such third-party acknowledgments normally appear.
 *
 * 4) The name Indiana University or Community Grids Lab or Twister,
 *  shall not be used to endorse or promote products derived from this software
 *  without prior written permission from Indiana University.  For written
 *  permission, please contact the Advanced Research and Technology Institute
 *  ("ARTI") at 351 West 10th Street, Indianapolis, Indiana 46202.
 * 5) Products derived from this software may not be called Twister,
 *  nor may Indiana University or Community Grids Lab or Twister appear
 *  in their name, without prior written permission of ARTI.
 *
 *
 *  Indiana University provides no reassurances that the source code provided
 *  does not infringe the patent or any other intellectual property rights of
 *  any other entity.  Indiana University disclaims any liability to any
 *  recipient for claims brought by any other entity based on infringement of
 *  intellectual property rights or otherwise.
 *
 * LICENSEE UNDERSTANDS THAT SOFTWARE IS PROVIDED "AS IS" FOR WHICH NO
 * WARRANTIES AS TO CAPABILITIES OR ACCURACY ARE MADE. INDIANA UNIVERSITY GIVES
 * NO WARRANTIES AND MAKES NO REPRESENTATION THAT SOFTWARE IS FREE OF
 * INFRINGEMENT OF THIRD PARTY PATENT, COPYRIGHT, OR OTHER PROPRIETARY RIGHTS.
 * INDIANA UNIVERSITY MAKES NO WARRANTIES THAT SOFTWARE IS FREE FROM "BUGS",
 * "VIRUSES", "TROJAN HORSES", "TRAP DOORS", "WORMS", OR OTHER HARMFUL CODE.
 * LICENSEE ASSUMES THE ENTIRE RISK AS TO THE PERFORMANCE OF SOFTWARE AND/OR
 * ASSOCIATED MATERIALS, AND TO THE PERFORMANCE AND VALIDITY OF INFORMATION
 * GENERATED USING SOFTWARE.
 */

package cgl.imr.script;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import org.safehaus.uuid.UUIDGenerator;

import cgl.imr.base.TwisterConstants;
import cgl.imr.base.TwisterException;
import cgl.imr.base.TwisterMessage;
import cgl.imr.client.ClientCall;
import cgl.imr.config.ConfigurationException;
import cgl.imr.config.TwisterConfigurations;
import cgl.imr.message.DirListRequest;
import cgl.imr.message.DirListResponse;
import cgl.imr.message.WorkerResponse;

/**
 * A utility class to collect files (data files typically generated by MapReduce
 * computations) distributed among the compute nods to a given directory. This
 * class uses Twister's functionality of creating partition files to get the
 * list of files from all compute nodes.
 * 
 * @author Jaliya Ekanayake (jaliyae@gmail.com, jekanaya@cs.indiana.edu)
 * 
 */
public class FileCollector {

	public static String FILE_COPY_PROGRAM = "scpfile.sh";
	public static int NUM_FILE_COPY_THREADS = 10;

	public static void main(String[] args) {
		if (args.length != 3) {
			System.out
					.println("Usage: [src directory (remote)][file name pattern][destination directory(local)]");
			return;
		}
		FileCollector fileCollector;

		fileCollector = new FileCollector();
		File srcDir = new File(args[2]);
		if (!srcDir.exists()) {
			System.err
					.println("Invalid destition directory. Directory does not exist.");
			System.exit(-1);
		}
		fileCollector.pollNodesAndCopyFile(args[0], args[1], args[2]);
		fileCollector.close();
		System.exit(0);
	}

	private ClientCall call = null;
	private TwisterConfigurations configs;
	private List<String> nodes;

	private UUIDGenerator uuidGen = null;

	public FileCollector() {
		this.nodes = new ArrayList<String>();

		try {
			this.configs = TwisterConfigurations.getInstance();
		} catch (ConfigurationException e) {
			System.err.println(e.getMessage());
			System.exit(-1);
		}

		try {
			populateListOfNodes();
		} catch (TwisterException e) {
			System.err.println("Error in reading nodes file.");
			System.exit(-1);
		}

		if (nodes.size() == 0) {
			System.err.println("No nodes specified in teh nodes file.");
			System.exit(-1);
		}

		this.uuidGen = UUIDGenerator.getInstance();
		try {
			call = new ClientCall();
		} catch (TwisterException e) {
			System.err
					.println("Error in establishing a connection with the message broker. Check if the broker is running.");
			System.exit(-1);
		}
	}

	public void close() {
		try {
			this.call.close();
		} catch (TwisterException e) {
			System.err
					.println("Error in closing the connection with the broker.");
		}
	}

	public void pollNodesAndCopyFile(String dir, String filter, String destDir) {
		int nodeNo = 0;
		List<String> tmpFiles = null;
		String responseTopic = null;

		Object lock = new Object();
		boolean errors = false;
		ExecutorService taskExecutor = Executors
				.newFixedThreadPool(NUM_FILE_COPY_THREADS);

		String dataDir = (configs.getLocalDataDir() + "/" + dir).replace("//",
				"/");
		try {
			String filePath;
			String refId;
			for (String node : nodes) {
				refId = uuidGen.generateTimeBasedUUID().toString();
				responseTopic = TwisterConstants.PARTITION_FILE_RESPONSE_TOPIC_BASE
						+ refId;
				DirListRequest req = new DirListRequest(dataDir, filter,
						responseTopic);
				req.setRefMessageId(refId);

				List<TwisterMessage> responses = call.sendReceive(
						TwisterConstants.MAP_REDUCE_TOPIC_BASE + "/" + nodeNo,
						responseTopic, req);
				if (responses == null) {
					System.err.print("Node " + node + " is not responding");
				} else if (responses.get(0).readByte() == TwisterConstants.WORKER_RESPONSE) {
					WorkerResponse res = new WorkerResponse(responses.get(0));			
					if (res.isHasException()) {
						System.err.println("Node " + node + " gave error: "
								+ res.getExceptionString());
						continue;
					}
				} else {
					DirListResponse response = new DirListResponse();
					response.fromTwisterMessage(responses.get(0));
					tmpFiles = response.getFileNames();
					if (tmpFiles != null) {
						for (String file : tmpFiles) {
							filePath = node + ":" + file;
							taskExecutor.execute(new FileCopyThread(filePath,
									destDir, lock, errors));
						}
					}
				}
				nodeNo++;
			}

			taskExecutor.shutdown();
			try {
				taskExecutor.awaitTermination(Long.MAX_VALUE,
						TimeUnit.NANOSECONDS);
			} catch (InterruptedException e) {
				System.exit(-1);
			}

			if (errors) {
				System.exit(-1);
			} else {
				System.exit(0);
			}

		} catch (Exception e) {
			System.err
					.println("File collector failed due to " + e.getMessage());
			System.exit(-1);
		}
	}

	private void populateListOfNodes() throws TwisterException {
		BufferedReader reader;
		try {
			reader = new BufferedReader(new FileReader(configs.getNodeFile()));
			String line = null;
			while ((line = reader.readLine()) != null) {
				this.nodes.add(line);
			}
			reader.close();
		} catch (Exception e) {
			throw new TwisterException(e);
		}
	}
}
